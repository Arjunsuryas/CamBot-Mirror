import { useCallback, useRef } from 'react';

export const useAudioAlert = () => {
  const audioContextRef = useRef<AudioContext | null>(null);

  const initAudioContext = useCallback(() => {
    if (!audioContextRef.current) {
      audioContextRef.current = new (window.AudioContext || (window as any).webkitAudioContext)();
    }
    return audioContextRef.current;
  }, []);

  const playAlertSound = useCallback((expression: string) => {
    try {
      const audioContext = initAudioContext();
      
      if (audioContext.state === 'suspended') {
        audioContext.resume();
      }

      const oscillator = audioContext.createOscillator();
      const gainNode = audioContext.createGain();

      oscillator.connect(gainNode);
      gainNode.connect(audioContext.destination);

      // Different frequencies for different expressions
      const frequencies: { [key: string]: number } = {
        happy: 523.25,    // C5
        sad: 293.66,      // D4
        surprised: 783.99, // G5
        angry: 220.00,    // A3
        excited: 659.25,  // E5
        neutral: 440.00   // A4
      };

      oscillator.frequency.setValueAtTime(
        frequencies[expression] || 440, 
        audioContext.currentTime
      );
      
      oscillator.type = 'sine';
      
      // Create envelope
      gainNode.gain.setValueAtTime(0, audioContext.currentTime);
      gainNode.gain.linearRampToValueAtTime(0.3, audioContext.currentTime + 0.1);
      gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5);

      oscillator.start(audioContext.currentTime);
      oscillator.stop(audioContext.currentTime + 0.5);

    } catch (error) {
      console.warn('Audio playback failed:', error);
    }
  }, [initAudioContext]);

  return { playAlertSound };
};
